install.packages("rmarkdown")
.library
Cereal <- read.csv("cereal.txt",header=T)
Cereal <- read.csv("cereal.csv",header=T)
setwd("~")
getwd( )
setwd("~/Desktop/Pstat126 hw2")
Cereal <- read.csv("cereal.csv",header=T)
str(Cereal)
View(Cereal)
new_cereal <- Cereal %>%
select(Rating, Protein, Fat, Fiber, Carbo, Sugars, Potass, Vitamins, Cups)
new_cereal <- cereal[, c("Rating", "Protein", "Fat", "Fiber", "Carbo", "Sugars", "Potass", "Vitamins", "Cups")]
new_cereal <- Cereal[, c("Rating", "Protein", "Fat", "Fiber", "Carbo", "Sugars", "Potass", "Vitamins", "Cups")]
Cereal <- read.csv("cereal.csv",header=T)
str(Cereal)
new_cereal <- Cereal[, c("Rating", "Protein", "Fat", "Fiber", "Carbo", "Sugars", "Potass", "Vitamins", "Cups")]
new_cereal <- Cereal[, c("$ Rating", "$ Protein", "Fat", "Fiber", "Carbo", "Sugars", "Potass", "Vitamins", "Cups")]
View(Cereal)
new_cereal <- Cereal.csv[, c("Rating", "Protein", "Fat", "Fiber", "Carbo", "Sugars", "Potass", "Vitamins", "Cups")]
new_cereal <- cereal.csv[, c("Rating", "Protein", "Fat", "Fiber", "Carbo", "Sugars", "Potass", "Vitamins", "Cups")]
new_cereal <- Cereal[, c("Rating", "Protein", "Fat", "Fiber", "Carbo", "Sugars", "Potass", "Vitamins", "Cups")]
new_cereal <- Cereal[, c("rating", "protein", "fat", "fiber", "carbo", "sugars", "potass", "vitamins", "cups")]
View(new_cereal)
model <- lm(rating ~ protein + fat + fiber + carbo + sugars + potass + vitamins + cups, data = new_cereal)
summary(model)
tinytex:::is_tinytex()
# Display the summary output.
summary(model)
View(new_cereal)
summayr(new_cereal)
summary(new_cereal)
hist(new_cereal, main = colnames(new_cereal)
par(mfrow=c(3,3)) # Set the layout of the plots to be 3 rows and 3 columns
par(mfrow=c(3,3))
for(i in 1:ncol(new_cereal)){
hist(new_cereal[,i], main=colnames(new_cereal)[i], xlab="", ylab="")
}
# Scatter plots for each variable pair
pairs(new_cereal)
# Correlation matrix
cor(new_cereal)
par(mfrow=c(3,3))
for(i in 1:ncol(new_cereal)){
hist(new_cereal[,i], main=colnames(new_cereal)[i], xlab="", ylab="")
}
# Scatter plots for each variable pair
pairs(new_cereal)
# Q(b) Use the lm function in R to fit the MLR model with rating as the response and the other 8 variables as predictors.
model <- lm(rating ~ protein + fat + fiber + carbo + sugars + potass + vitamins + cups, data = new_cereal)
# Display the summary output.
summary(model)
# Display the summary output.
summary(model)
p_value_carbo <- 2*pt(abs(-0.110), df = 68, lower.tail = FALSE)
p_value_carbo
p_value_carbo  # The answer is 0.9127334. And the computed p-value is identical to the p-value provided in the summary output.
reduced_model <- lm(rating ~ protein + fat + fiber + carbo + sugars + cups, data = new_cereal)
full_model <- lm(rating ~ protein + fat + fiber + carbo + sugars + potass + vitamins + cups, data = new_cereal)
anova(full_model, reduced_model)
summary(model)
confint(lm_model, "protein", level = 0.99)
confint(model, "protein", level = 0.99)
# Q(i) Construct a new dataframe named new_data, with the provided data for each variable
new_data <- data.frame(protein = 3, fat = 5, fiber = 2, carbo = 13, sugars = 6, potass = 60, vitamins = 25, cups = 0.8)
# Then use pridict() function, and use the model in q(b) to make a prediction based on new_data
predicted_rating <- predict(model, newdata = new_data)
predicted_rating
# Q(i) Construct a new dataframe named new_data, with the provided data for each variable
new_data <- data.frame(protein = 3, fat = 5, fiber = 2, carbo = 13, sugars = 6, potass = 60, vitamins = 25, cups = 0.8)
# Then use pridict() function, and use the model in q(b) to make a prediction based on new_data
predicted_rating <- predict(model, newdata = new_data)
predicted_rating
# Q(j) Using the datafram in Q(i) with predict() function again to constaurct a prediction interval.
predicted_interval <- predict(model, new_data, interval = "prediction", level = 0.95)
predicted_interval
