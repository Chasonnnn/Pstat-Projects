install.packages("rmarkdown")
# Show the table with the given command.
Cereal <- read.csv("cereal.csv",header=T)
# Show the table with the given command.
Cereal <- read.csv("cereal.csv",header=T)
1. This question uses the Auto dataset available in the ISLR package. The dataset under the name *Auto* is automatically available once the ISLR package is loaded.
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
install.pacakage(ISLR)
# Q2(a) load the fat dataset:
library(faraway)
library(faraway)
install.packages("faraway")
library(faraway)
cars <- read.table(file="cars.txt", head=T)
cars <- read.table(file='cars.txt', head=T)
cars <- read.table(file='cars.txt', head=T)
setwd('/Users/chason/Desktop/pstat131/hw2')
getwd()
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
library(tidyverse)
library(tidymodels)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
# Load the required packages first.
library(tidyverse)
library(tidymodels)
abalone_data <- read_csv("abalone.csv")
# Calculate the age (which is calculated as the number of rings + 1.5)
abalone_data <- abalone_data %>%
mutate(age = rings + 1.5) # Also create new variable for 'age'
# View the first few rows to check the new 'age' column
head(abalone_data)
# Create a histogram to assess and describe the distribution of age
ggplot(abalone_data, aes(x = age)) +
geom_histogram(aes(y = ..density..), binwidth = 1, alpha = 0.7, fill = "blue") +
geom_density(alpha = 0.2, fill = "red") +
ggtitle("Distribution of Abalone Age") +
xlab("Age") +
ylab("Density") +
theme_minimal()
# Set a seed.
set.seed(123)
# Perform stratified sampling to split the data into training and testing sets
data_split <- initial_split(abalone_data, prop = 0.8, strata = "type")
train_data <- training(data_split)
test_data <- testing(data_split)
# View and check the first several rows of the training and testing sets
head(train_data)
head(test_data)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
# Load the required packages first.
library(tidyverse)
library(tidymodels)
library(dials)
library(dials)
# Create the recipe
abalone_recipe <- recipe(age ~ ., data = train_data) %>%
update_role(rings, new_role = "ID variable") %>%
step_dummy(type, one_hot = TRUE) %>%
step_interact(~ type:shucked_weight + longest_shell:diameter + shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# Print the recipe to check it
abalone_recipe
# Create the recipe
abalone_recipe <- recipe(age ~ ., data = train_data) %>%
update_role(rings, new_role = "ID variable") %>%
step_dummy(type, one_hot = TRUE) %>%
step_interact(~ type:shucked_weight + longest_shell:diameter +
shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# Print the recipe to check it
abalone_recipe
# Create a linear regression model specification
linear_reg_spec <- linear_reg() %>%
set_engine("lm")
# Print the linear regression specification to check it
linear_reg_spec
View(linear_reg_spec)
# Create a linear regression model specification
linear_reg_spec <- linear_reg() %>%
set_engine("lm")
# Print the linear regression specification to check it
linear_reg_spec
# Create a KNN model specification
knn_spec <- nearest_neighbor(neighbors = 7) %>%
set_engine("kknn")
# Print the KNN model specification to check it
knn_spec
# Create a workflow for the linear regression model
linear_reg_wf <- workflow() %>%
add_model(linear_reg_spec) %>%
add_recipe(abalone_recipe)
# Fit the linear regression model to the training data
linear_reg_fit <- linear_reg_wf %>%
fit(data = train_data)
# Create the recipe
abalone_recipe <- recipe(age ~ ., data = train_data) %>%
update_role(rings, new_role = "ID variable") %>%
step_dummy(type, one_hot = TRUE) %>%
step_interact(~ type:shucked_weight) %>%
step_interact(~ longest_shell:diameter) %>%
step_interact(~ shucked_weight:shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# Print the recipe to check it
abalone_recipe
# Create a linear regression model specification
linear_reg_spec <- linear_reg() %>%
set_engine("lm")
# Print the linear regression specification to check it
linear_reg_spec
# Create a KNN model specification
knn_spec <- nearest_neighbor(neighbors = 7) %>%
set_engine("kknn")
# Print the KNN model specification to check it
knn_spec
# Create a workflow for the linear regression model
linear_reg_wf <- workflow() %>%
add_model(linear_reg_spec) %>%
add_recipe(abalone_recipe)
# Fit the linear regression model to the training data
linear_reg_fit <- linear_reg_wf %>%
fit(data = train_data)
# Create the recipe
# Create the recipe again with manual interactions using step_mutate()
abalone_recipe <- recipe(age ~ ., data = train_data) %>%
update_role(rings, new_role = "ID variable") %>%
step_dummy(type, one_hot = TRUE) %>%
step_mutate(interaction_1 = type_M * shucked_weight,
interaction_2 = longest_shell * diameter,
interaction_3 = shucked_weight * shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# Print the recipe to check it
abalone_recipe
# Create a linear regression model specification
linear_reg_spec <- linear_reg() %>%
set_engine("lm")
# Print the linear regression specification to check it
linear_reg_spec
# Create a KNN model specification
knn_spec <- nearest_neighbor(neighbors = 7) %>%
set_engine("kknn")
# Print the KNN model specification to check it
knn_spec
# Create a workflow for the linear regression model
linear_reg_wf <- workflow() %>%
add_model(linear_reg_spec) %>%
add_recipe(abalone_recipe)
# Fit the linear regression model to the training data
linear_reg_fit <- linear_reg_wf %>%
fit(data = train_data)
# Create a workflow for the KNN model
knn_wf <- workflow() %>%
add_model(knn_spec) %>%
add_recipe(abalone_recipe)
# Create a KNN model specification with mode explicitly set to "regression"
knn_spec <- nearest_neighbor(neighbors = 7, mode = "regression") %>%
set_engine("kknn")
# Print the KNN model specification to check it
knn_spec
# Print the KNN model specification to check it
knn_spec
# Create a workflow for the linear regression model
linear_reg_wf <- workflow() %>%
add_model(linear_reg_spec) %>%
add_recipe(abalone_recipe)
# Fit the linear regression model to the training data
linear_reg_fit <- linear_reg_wf %>%
fit(data = train_data)
# Create a workflow for the KNN model
knn_wf <- workflow() %>%
add_model(knn_spec) %>%
add_recipe(abalone_recipe)
# Fit the KNN model to the training data
knn_fit <- knn_wf %>%
fit(data = train_data)
load.packages('kknn')
install.packages("kknn")
# Create a KNN model specification with mode explicitly set to "regression"
knn_spec <- nearest_neighbor(neighbors = 7, mode = "regression") %>%
set_engine("kknn")
# Print the KNN model specification to check it
knn_spec
# Create a workflow for the linear regression model
linear_reg_wf <- workflow() %>%
add_model(linear_reg_spec) %>%
add_recipe(abalone_recipe)
# Fit the linear regression model to the training data
linear_reg_fit <- linear_reg_wf %>%
fit(data = train_data)
# Create a workflow for the KNN model
knn_wf <- workflow() %>%
add_model(knn_spec) %>%
add_recipe(abalone_recipe)
# Fit the KNN model to the training data
knn_fit <- knn_wf %>%
fit(data = train_data)
# Print the fitted models to check them
linear_reg_fit
knn_fit
# Create a data frame for the corrected hypothetical female abalone
hypothetical_abalone_corrected <- tibble(
type = "F",
longest_shell = 0.50,
diameter = 0.10,
height = 0.30,
whole_weight = 4,
shucked_weight = 1,
viscera_weight = 2,
shell_weight = 1
)
# Use the linear regression model to predict the age
predicted_age_corrected <- predict(linear_reg_fit, new_data =
hypothetical_abalone_corrected)
# Create a data frame for the corrected hypothetical female abalone
# Also add a placeholder for 'rings' to avoid errors
hypothetical_abalone_corrected <- tibble(
type = "F",
longest_shell = 0.50,
diameter = 0.10,
height = 0.30,
whole_weight = 4,
shucked_weight = 1,
viscera_weight = 2,
shell_weight = 1,
rings = NA  # Placeholder
)
# Use the tidymodels predict function
predicted_age_corrected <- tidymodels::predict(linear_reg_fit, new_data = hypothetical_abalone_corrected)
# Create a data frame for the corrected hypothetical female abalone
# Also add a placeholder for 'rings' to avoid errors
hypothetical_abalone_corrected <- tibble(
type = "F",
longest_shell = 0.50,
diameter = 0.10,
height = 0.30,
whole_weight = 4,
shucked_weight = 1,
viscera_weight = 2,
shell_weight = 1,
rings = NA  # Placeholder
)
# Use the predict function
predicted_age_corrected <- predict(linear_reg_fit, new_data =
hypothetical_abalone_corrected)
# Print the predicted age
predicted_age_corrected
# Predictions for the linear regression model
linear_reg_preds <- predict(linear_reg_fit, new_data = test_data) %>%
bind_cols(actual_age = test_data$age)
# Predictions for the KNN model
knn_preds <- predict(knn_fit, new_data = test_data) %>%
bind_cols(actual_age = test_data$age)
# Metrics for the linear regression model
linear_reg_metrics <- linear_reg_preds %>%
metric_set(actual_age, .pred)
# Metrics for the linear regression model
linear_reg_metrics <- linear_reg_preds %>%
metric_set(truth = "actual_age", estimate = ".pred")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
# Load the required packages first.
library(tidyverse)
library(tidymodels)
library(dials)
library(yardstick)
# Create a metric set as required
metric_set <- metric_set(rsq, rmse, mae)
# Predictions for the linear regression model
linear_reg_preds <- predict(linear_reg_fit, new_data = test_data) %>%as_tibble()
linear_reg_preds <- bind_cols(linear_reg_preds, actual_age = test_data$age)
# Predictions for the KNN model
knn_preds <- predict(knn_fit, new_data = test_data) %>% as_tibble()
knn_preds <- bind_cols(knn_preds, actual_age = test_data$age)
# Metrics for the linear regression model
linear_reg_metrics <- metric_set(linear_reg_preds,
truth = actual_age,
estimate = .pred)
# Metrics for the KNN model
knn_metrics <- metric_set(knn_preds,
truth = actual_age,
estimate = .pred)
# Print the metrics for both models
print("Metrics for Linear Regression Model")
linear_reg_metrics
print("Metrics for KNN Model")
knn_metrics
# Apply metric set to the tibble for the linear regression model
linear_reg_metrics <- linear_reg_preds %>%
metric_set(.pred, truth = actual_age)
# Print and interpret the metrics for the linear regression model
print("Metrics for Linear Regression Model")
print(linear_reg_metrics)
# Apply metric set to the tibble for the KNN model
knn_metrics <- knn_preds %>%
metric_set(.pred, truth = actual_age)
# Print and interpret the metrics for the KNN model
print("Metrics for KNN Model")
print(knn_metrics)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
# Load the required packages first.
library(tidyverse)
library(tidymodels)
library(dials)
library(yardstick)
# Create the recipe with manual interactions using step_mutate()
abalone_recipe <- recipe(age ~ ., data = train_data) %>%
update_role(rings, new_role = "ID variable") %>%
step_dummy(type, one_hot = TRUE) %>%
step_mutate(interaction_1 = type_M * shucked_weight,
interaction_2 = longest_shell * diameter,
interaction_3 = shucked_weight * shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# Print the recipe to check it
abalone_recipe
# Create the recipe with manual interactions using step_mutate()
abalone_recipe <- recipe(age ~ ., data = train_data) %>%
update_role(rings, new_role = "ID variable") %>%
step_dummy(type, one_hot = TRUE) %>%
step_mutate(interaction_1 = type_M * shucked_weight,
interaction_2 = longest_shell * diameter,
interaction_3 = shucked_weight * shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# Print the recipe to check it
abalone_recipe
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE)
# Load the required packages first.
library(tidyverse)
library(tidymodels)
library(dials)
library(yardstick)
# Read the dataset.
abalone_data <- read_csv("abalone.csv")
# Calculate the age (which is calculated as the number of rings + 1.5)
abalone_data <- abalone_data %>%
mutate(age = rings + 1.5) # Also create new variable for 'age'
# View the first few rows to check the new 'age' column
head(abalone_data)
# Create a histogram to assess and describe the distribution of age
ggplot(abalone_data, aes(x = age)) +
geom_histogram(aes(y = ..density..), binwidth = 1, alpha = 0.7, fill = "blue") +
geom_density(alpha = 0.2, fill = "red") +
ggtitle("Distribution of Abalone Age") +
xlab("Age") +
ylab("Density") +
theme_minimal()
## From the histogram, we can observe and conclude that:
#1. The age distribution is somewhat right-skewed, meaning that there are more
#younger abalones (yonger than 13) than older ones in the dataset.
#2. Most abalones have an age between approximately 8 and 12
# Set a seed.
set.seed(123)
# Perform stratified sampling to split the data into training and testing sets
data_split <- initial_split(abalone_data, prop = 0.8, strata = "type")
train_data <- training(data_split)
test_data <- testing(data_split)
# View and check the first several rows of the training and testing sets
head(train_data)
head(test_data)
# The reason why we should not include 'rings' to pridict 'age' is that
#'rings' is essentially used to calculate the age. And this would give
#unrealistically optimistic performance metrics, as the model would have
#access to information it shouldn't have during the training phase. The issue
#is also know as 'data leakage', which means using a variable in the model
#that directly or indirectly includes the information we're trying to predict.
# Create the recipe with manual interactions using step_mutate()
abalone_recipe <- recipe(age ~ ., data = train_data) %>%
update_role(rings, new_role = "ID variable") %>%
step_dummy(type, one_hot = TRUE) %>%
step_mutate(interaction_1 = type_M * shucked_weight,
interaction_2 = longest_shell * diameter,
interaction_3 = shucked_weight * shell_weight) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
# Print the recipe to check it
abalone_recipe
